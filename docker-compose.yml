version: "3"

services:
  traefik:
    image: traefik:2.2
    networks:
      - internal
      - web
    volumes:
      - './traefik/conf/traefik.yml:/traefik.yml'
      - '/var/run/docker.sock:/var/run/docker.sock'
      - './traefik/certs:/certs'
      - './traefik/acme.json:/acme.json'
    environment:
      CF_API_EMAIL: ${CLOUDFLARE_EMAIL}
      CF_DNS_API_TOKEN: ${CLOUDFLARE_API_TOKEN}
    ports:
      - 80:80
      - 443:443
      - 9000:8080
    labels:
      - traefik.enable=true
      - traefik.http.routers.monitoring.service=api@internal
      - traefik.http.routers.monitoring.rule=Host(`monitoring.${DOMAIN_NAME}`)
      - traefik.http.routers.monitoring.tls=true
      - traefik.http.routers.monitoring.tls.certresolver=letsEncrypt
      - traefik.port=9000
    restart: always
    dns:
      - pihole
      - 1.1.1.1
  
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      - "8081:80/tcp"
      - "53:53/tcp"
      - "53:53/udp"
    environment:
      TZ: 'Asia/Kolkata'
      WEBPASSWORD: ${WEBPASSWORD}
      PIHOLE_DNS_: ${PIHOLE_DNS_}
    volumes:
      - './etc-pihole/:/etc/pihole/'
      - './etc-dnsmasq.d/:/etc/dnsmasq.d/'
    cap_add:
      - NET_ADMIN
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.pihole.rule=Host(`pi.hole`)
      - traefik.http.services.pihole.loadbalancer.server.port=8081
      # - traefik.port=8081
    networks:
      - internal
      - web
  
  gotify:
    container_name: gotify
    image: gotify/server-arm64:latest
    environment:
      TZ: "Asia/Kolkata"
    ports:
      - "8070:80"
    volumes:
      - './gotify:/app/data'
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.gotify.rule=Host(`gotify.${DOMAIN_NAME}`)
      - traefik.http.routers.gotify.tls=true
      - traefik.port=8070
      - traefik.http.routers.gotify.tls.certresolver=letsEncrypt
    networks: 
      - internal
      - web

  postgres:
    container_name: postgres
    image: postgres:13.4
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - "5432:5432"
    volumes:
      - './postgres-data/:/var/lib/postgresql/data'
      - './postgres-init:/docker-entrypoint-initdb.d'
    restart: always
    networks:
      - internal

  
  giteadb:
    container_name: giteadb
    image: postgres:13.4
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: gitea
    ports:
      - "5431:5432"
    volumes:
      - './gitea-database/:/var/lib/postgresql/data'
    restart: always
    networks:
      - internal
  
  influxdb:
    container_name: influxdb
    image: influxdb:1.8.10
    environment:
      INFLUXDB_ADMIN_USER: "${INFLUXDB_USERNAME}"
      INFLUXDB_ADMIN_PASSWORD: "${INFLUXDB_PASSWORD}"
    ports:
      - 8086:8086
    volumes:
      - './influxdb/data:/var/lib/influxdb2'
      - './influxdb/config:/etc/influxdb2'
      - './create-telegraf.iql:/docker-entrypoint-initdb.d/create-telegraf.iql'
    restart: always
    networks:
      - internal

  bookstack:
    image: lscr.io/linuxserver/bookstack:latest
    container_name: bookstack
    environment:
      PUID: 1000
      PGID: 1000
      APP_URL: "https://wiki.${DOMAIN_NAME}"
      TZ: Asia/Kolkata
      DB_HOST: bookstack_db
      DB_USER: bookstack
      DB_PASS: ${POSTGRES_PASSWORD}
      DB_DATABASE: bookstackapp
    volumes:
      - ./bookstack:/config
    ports:
      - 6875:80
    depends_on:
      - bookstack_db
    labels:
      - traefik.enable=true
      - traefik.http.routers.bookstack.rule=Host(`wiki.${DOMAIN_NAME}`)
      - traefik.http.routers.bookstack.tls=true
      - traefik.http.routers.bookstack.tls.certresolver=letsEncrypt
      - traefik.http.services.bookstack.loadbalancer.server.port=80
    restart: unless-stopped
    networks:
      - internal
      - web

  bookstack_db:
    image: lscr.io/linuxserver/mariadb
    container_name: bookstack_db
    environment:
      PUID: 1000
      PGID: 1000
      MYSQL_ROOT_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: Asia/Kolkata
      MYSQL_DATABASE: bookstackapp
      MYSQL_USER: bookstack
      MYSQL_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./bookstack-database:/config
    restart: unless-stopped
    networks:
      - internal

  redis:
    container_name: redis
    image: redis
    restart: always
    networks:
      - internal

  send:
    container_name: send
    image: cvhariharan/send:v3.4.14-2-g3c42de0e
    environment:
      BASE_URL: "https://send.${DOMAIN_NAME}"
      REDIS_HOST: redis
      MAX_FILES_PER_ARCHIVE: 256
      MAX_FILE_SIZE: 5368709120
    volumes:
      - './send/uploads:/uploads'
    labels:
      - traefik.enable=true
      - traefik.http.routers.send.rule=Host(`send.${DOMAIN_NAME}`)
      - traefik.http.routers.send.tls=true
      - traefik.http.routers.send.tls.certresolver=letsEncrypt
      - traefik.http.services.send.loadbalancer.server.port=1443
    ports:
      - "1443:1443"
    depends_on:
      - redis
    networks:
      - internal
      - web


  gitea:
    container_name: gitea
    image: gitea/gitea:latest
    environment:
      USER_UID: 1000
      USER_GID: 1000
      GITEA__database__DB_TYPE: postgres
      GITEA__database__HOST: giteadb:5432
      GITEA__database__NAME: gitea
      GITEA__database__USER: ${POSTGRES_USER}
      GITEA__database__PASSWD: ${POSTGRES_PASSWORD}
    volumes:
      - ./gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.gitea.rule=Host(`git.${DOMAIN_NAME}`)
      - traefik.http.routers.gitea.tls=true
      - traefik.http.routers.gitea.tls.certresolver=letsEncrypt
      - traefik.http.services.gitea.loadbalancer.server.port=3000
    ports:
      - "3005:3000"
      - "2222:22"
    restart: unless-stopped
    networks:
      - internal
      - web


  joplin-server:
    container_name: joplin-server
    image: cvhariharan/joplin-server:v2.4.5-4-g0a54854f5
    environment:
      DB_CLIENT: pg
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DATABASE: ${POSTGRES_USER}
      APP_PORT: 22300
      APP_BASE_URL: https://joplin.${DOMAIN_NAME}
    ports:
      - "22300:22300"
    depends_on:
      - "postgres"
    labels:
      - traefik.enable=true
      - traefik.http.routers.joplin.rule=Host(`joplin.${DOMAIN_NAME}`)
      - traefik.http.routers.joplin.tls=true
      - traefik.port=22300
      - traefik.http.routers.joplin.tls.certresolver=letsEncrypt
    restart: always
    networks:
      - internal
      - web

  metube:
    container_name: metube
    image: alexta69/metube
    user: "1001:1001"
    ports:
      - "8090:8081"
    labels:
      - traefik.enable=true
      - traefik.http.routers.metube.rule=Host(`videos.${DOMAIN_NAME}`)
      - traefik.http.routers.metube.tls=true
      - traefik.http.services.metube.loadbalancer.server.port=8081
      - traefik.http.routers.metube.tls.certresolver=letsEncrypt
    volumes:
      - ./Videos:/downloads
    restart: unless-stopped
    networks:
      - web

  jellyfin:
    image: linuxserver/jellyfin
    devices:
      - /dev/vchiq:/dev/vchiq
    container_name: jellyfin
    environment:
      PUID: 1001
      PGID: 1001
      TZ: Asia/Kolkata
      UMASK_SET: "022"
    ports:
      - 8096:8096
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=Host(`jellyfin.${DOMAIN_NAME}`)
      - traefik.http.routers.jellyfin.tls=true
      - traefik.http.routers.jellyfin.tls.certresolver=letsEncrypt
      - traefik.port=8096
    volumes:
      - ./jellyfin/config:/config
      - /home/userzero/Movies:/data/movies
      - /home/userzero/TVShows:/data/tvshows
      - /home/userzero/Music:/data/music
      - /home/userzero/Videos:/data/videos
      - /dev/shm:/config/data/transcoding-temp/transcodes
      - /opt/vc/lib:/opt/vc/lib   
    networks:
      - internal
      - web
    restart: always 

  etebase:
    container_name: etebase
    image: cvhariharan/etebase:v0.7.0-147-g453869d 
    environment:
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    ports:
      - "5000:3735"
    volumes:
      - './etebase:/data'
    labels:
      - traefik.enable=true
      - traefik.http.routers.etebase.rule=Host(`etebase.${DOMAIN_NAME}`)
      - traefik.http.routers.etebase.tls=true
      - traefik.http.routers.etebase.tls.certresolver=letsEncrypt
      - traefik.port=5000
      # - traefik.http.services.etebase-service.loadbalancer.port=5000 
    restart: unless-stopped
    networks:
      - internal
      - web

  flame:
    container_name: flame
    image: pawelmalak/flame:multiarch1.7.4
    environment:
      TZ: 'Asia/Kolkata'
    volumes:
      - './flame:/app/data'
    ports:
      - "5005:5005"
    labels:
      - traefik.enable=true
      - traefik.http.routers.flame.rule=Host(`flame.${DOMAIN_NAME}`)
      - traefik.http.routers.flame.tls=true
      - traefik.http.routers.flame.tls.certresolver=letsEncrypt
      - traefik.port=5005
    restart: unless-stopped
    networks:
      - web

  miniflux:
    container_name: miniflux
    image: miniflux/miniflux:latest
    environment: 
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/miniflux?sslmode=disable"
      RUN_MIGRATIONS: "1"
      CREATE_ADMIN: "1"
      ADMIN_USERNAME: ${MIN_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${MIN_ADMIN_PASSWORD}
      BASE_URL: "https://miniflux.${DOMAIN_NAME}"
    ports:
      - "5551:8080"
    depends_on:
      - "postgres"
    labels:
      - traefik.enable=true
      - traefik.http.routers.miniflux.rule=Host(`miniflux.${DOMAIN_NAME}`)
      - traefik.http.routers.miniflux.tls=true
      - traefik.http.routers.miniflux.tls.certresolver=letsEncrypt
      - traefik.port=5551
    restart: unless-stopped
    networks:
      - internal
      - web
  
  grafana:
    container_name: grafana
    image: grafana/grafana:8.2.0
    ports:
      - 3000:3000
    user: "$UID:$GID"
    volumes:
      - './grafana/data:/var/lib/grafana'
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME}`)
      - traefik.http.routers.grafana.tls=true
      - traefik.http.routers.grafana.tls.certresolver=letsEncrypt
      - traefik.port=3000
    restart: unless-stopped
    networks:
      - internal
      - web

  qbittorrent:
    container_name: qbittorrent
    image: lscr.io/linuxserver/qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - WEBUI_PORT=8080
    volumes:
      - "./qbittorrent/config:/config"
      - "./Downloads:/downloads"
      - "./Movies:/movies"
      - "./Music:/music"
    ports:
      - 6881:6881
      - 6881:6881/udp
      - 8055:8080
    labels:
      - traefik.enable=true
      - traefik.http.routers.qb.rule=Host(`qb.${DOMAIN_NAME}`)
      - traefik.http.routers.qb.tls=true
      - traefik.http.services.qb.loadbalancer.server.port=8080
      - traefik.http.routers.qb.tls.certresolver=letsEncrypt
    networks:
      - internal
      - web
    restart: unless-stopped
  
  linkding:
    container_name: linkding
    image: sissbruecker/linkding:latest
    ports:
      - "9966:9090"
    volumes:
      - "./linkding/data:/etc/linkding/data"
    environment:
      - LD_DISABLE_BACKGROUND_TASKS=False
      - LD_DISABLE_URL_VALIDATION=False
    labels:
      - traefik.enable=true
      - traefik.http.routers.linkding.rule=Host(`links.${DOMAIN_NAME}`)
      - traefik.http.routers.linkding.tls=true
      - traefik.http.services.linkding.loadbalancer.server.port=9090
      - traefik.http.routers.linkding.tls.certresolver=letsEncrypt
    networks:
      - internal
      - web
    restart: unless-stopped

  nextclouddb:
    container_name: ncdb
    image: postgres:13.4
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: nextcloud
    ports:
      - "5430:5432"
    volumes:
      - './nc-database/:/var/lib/postgresql/data'
    restart: always
    networks:
      - internal

  nextcloud:
    container_name: nextcloud
    image: nextcloud
    environment:
      POSTGRES_DB: nextcloud
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: nextclouddb
      NEXTCLOUD_TRUSTED_DOMAINS: "https://nc.${DOMAIN_NAME}"
      REDIS_HOST: redis
    volumes:
      - './nextcloud:/var/www/html'
    labels:
      - traefik.enable=true
      - traefik.http.routers.nc.rule=Host(`nc.${DOMAIN_NAME}`)
      - traefik.http.routers.nc.tls=true
      - traefik.http.routers.nc.tls.certresolver=letsEncrypt
      - traefik.http.services.nc.loadbalancer.server.port=80
    restart: unless-stopped
    networks:
      - internal
      - web
    depends_on:
      - nextclouddb

networks:
  web:
    external: true
  internal:
    external: false
