version: "3"

services:
  traefik:
    image: traefik:2.2
    networks:
      - web
      - internal
    volumes:
      - './traefik/conf/traefik.yml:/traefik.yml'
      - '/var/run/docker.sock:/var/run/docker.sock'
      - './traefik/certs:/certs'
    ports:
      - 80:80
      - 443:443
      - 9000:8080
    labels:
      - traefik.enable=true
      - traefik.http.routers.monitoring.service=api@internal
      - traefik.http.routers.monitoring.rule=Host(`monitoring.${DOMAIN_NAME}`)
      - traefik.http.routers.monitoring.tls=true
      - traefik.port=9000
    restart: always
    dns:
      - pihole
      - 1.1.1.1
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8081:80/tcp"
    environment:
      TZ: 'Asia/Kolkata'
      WEBPASSWORD: ${WEBPASSWORD}
      PIHOLE_DNS_: ${PIHOLE_DNS_}
    volumes:
      - './etc-pihole/:/etc/pihole/'
      - './etc-dnsmasq.d/:/etc/dnsmasq.d/'
    cap_add:
      - NET_ADMIN
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.pihole.rule=Host(`pihole.${DOMAIN_NAME}`)
      - traefik.http.routers.pihole.tls=true
      - traefik.port=80
    networks:
      - internal
      - web

  postgres:
    container_name: postgres
    image: postgres:13.4
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - "5432:5432"
    volumes:
      - './postgres-data/:/var/lib/postgresql/data'
      - './postgres-init:/docker-entrypoint-initdb.d'
    restart: always
    networks:
      - internal
    
  nocodb:
    container_name: nocodb
    image: nocodb/nocodb
    environment:
      NC_DB: pg://postgres:5432?u=${POSTGRES_USER}&p=${POSTGRES_PASSWORD}&d=nocodb
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - "postgres"
    labels:
      - traefik.enable=true
      - traefik.http.routers.nocodb.rule=Host(`nocodb.${DOMAIN_NAME}`)
      - traefik.http.routers.nocodb.tls=true
      - traefik.port=8080
    networks:
      - internal
      - web

  joplin-server:
    container_name: joplin-server
    image: cvhariharan/joplin-server:v2.4.5-4-g0a54854f5
    environment:
      DB_CLIENT: pg
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DATABASE: ${POSTGRES_USER}
      APP_PORT: 22300
      APP_BASE_URL: https://joplin.${DOMAIN_NAME}
    ports:
      - "22300:22300"
    depends_on:
      - "postgres"
    labels:
      - traefik.enable=true
      - traefik.http.routers.joplin.rule=Host(`joplin.${DOMAIN_NAME}`)
      - traefik.http.routers.joplin.tls=true
      - traefik.port=22300
    restart: always
    networks:
      - internal
      - web
  
  etebase:
    container_name: etebase
    image: cvhariharan/etebase:v0.7.0-147-g453869d 
    environment:
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    ports:
      - "5000:3735"
    volumes:
      - './etebase:/data'
    labels:
      - traefik.enable=true
      - traefik.http.routers.etebase.rule=Host(`etebase.${DOMAIN_NAME}`)
      - traefik.http.routers.etebase.tls=true
      - traefik.port=5000
      # - traefik.http.services.etebase-service.loadbalancer.port=5000 
    restart: unless-stopped
    networks:
      - internal
      - web
  
  flame:
    container_name: flame
    image: pawelmalak/flame:multiarch
    volumes:
      - './flame:/app/data'
    ports:
      - "5005:5005"
    labels:
      - traefik.enable=true
      - traefik.http.routers.flame.rule=Host(`flame.${DOMAIN_NAME}`)
      - traefik.http.routers.flame.tls=true
      - traefik.port=5005
    restart: unless-stopped
    networks:
      - web

  miniflux:
    container_name: miniflux
    image: miniflux/miniflux:latest
    environment: 
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/miniflux?sslmode=disable"
      RUN_MIGRATIONS: "1"
      CREATE_ADMIN: "1"
      ADMIN_USERNAME: ${MIN_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${MIN_ADMIN_PASSWORD}
    ports:
      - "6000:8080"
    depends_on:
      - "postgres"
    labels:
      - traefik.enable=true
      - traefik.http.routers.miniflux.rule=Host(`miniflux.${DOMAIN_NAME}`)
      - traefik.http.routers.miniflux.tls=true
      - traefik.port=6000
    restart: unless-stopped
    networks:
      - internal
      - web

networks:
  web:
    external: true
  internal:
    external: false
